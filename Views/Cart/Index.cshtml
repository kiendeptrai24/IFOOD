@using iFood.ViewModels
@using iFood.Data.Enum
@model IndexCartViewModel

<style>
    .cart-hero { background: linear-gradient(135deg, var(--theme-primary), var(--theme-secondary)); }
    .item-card:hover { background-color: #f8f9fa; }
    .summary-sticky { position: sticky; bottom: 0; }
</style>
<section class="bg-light d-flex justify-content-center align-items-start min-vh-100 pt-3">
    <div class="w-75">
        <div class="cart-hero text-white p-3 rounded-3 shadow-sm mb-3 d-flex justify-content-between align-items-center">
            <div class="d-flex align-items-center gap-2">
                <i class="bi bi-cart3 fs-3"></i>
                <div>
                    <h4 class="mb-0">Your Cart</h4>
                    <small class="opacity-75">Items selected will be included at checkout</small>
                </div>
            </div>
            <span class="badge rounded-pill bg-dark">@Model.CartCount</span>
        </div>
        <div class="card shadow-sm">
            <div class="card-body">
                <div class="list-group">

                @foreach (var item in Model.CartItems)
                {
                    <div class="row position-relative">
                        <div class="list-group-item d-flex justify-content-between align-items-center item-card">
                            
                            <input type="checkbox" class="position-absolute top-0 end-0 m-2 form-check-input item-checkbox"
                             checked onchange="calculateTotal()"
                                   data-id="@item.Id" data-price="@item.Total">

                            <div class="col-lg-6 col-md-8 d-flex align-items-center">
                                <a type="button" class="delete-button" data-id="@item.Id">
                                    <button class="btn btn-outline-danger me-2" title="Remove"><i class="bi bi-x-lg"></i></button>
                                </a>
                                <button class="btn btn-outline-secondary me-2" title="Save for later"><i class="bi bi-heart"></i></button>
                                <img src="@item.product.Image" alt="Product Image" class="img-thumbnail" width="70" height="70" style="object-fit:cover;">
                                <div class="ms-3">
                                    <p class="mb-0 fw-semibold">@item.product.Name</p>
                                    <small class="text-muted d-block">Category: @item.product.Category</small>
                                    <small class="text-muted d-block">Price: $@item.Price</small>
                                </div>
                            </div>

                            <div class="col">
                                <div class="row">
                                    <div class="col-6 d-flex align-items-center justify-content-center">
                                        <button class="btn btn-outline-secondary"><i class="bi bi-dash"></i></button>
                                        <span class="mx-2">@item.Quantity</span>
                                        <button class="btn btn-outline-secondary"><i class="bi bi-plus"></i></button>
                                    </div>
                                    <div class="col">
                                        <p class="fw-semibold mb-0 col">Price: $@item.Price</p>
                                    </div>
                                    <div class="col">
                                        <p class="fw-semibold mb-0 col">Total: $@item.Total</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                </div>
            </div>
            <div class="card-footer bg-white summary-sticky d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center gap-3">
                    <p class="fw-semibold mb-0">Total: <span id="totalPrice">@Model.TotalPrice</span></p>
                    <small class="text-muted">USD</small>
                </div>
                <div class="d-flex gap-2">
                    <a class="btn btn-outline-danger" type="button" asp-controller="Cart" asp-action="DeleteAll">Delete all</a>
                    <button onclick="submitCheckedItems()" class="btn btn-primary">Checkout</button>
                </div>
            </div>
        </div>
    </div>
</section>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    function calculateTotal() {
        let total = 0;
        // Get all selected checkboxes
        document.querySelectorAll('.item-checkbox:checked').forEach(cb => {
            total += parseFloat(cb.dataset.price);
        });
        document.getElementById('totalPrice').innerText = total.toLocaleString() + "$";
    }

    function submitCheckedItems() {
        let selectedIds = [];
        document.querySelectorAll('.item-checkbox:checked').forEach(cb => {
            selectedIds.push(parseInt(cb.dataset.id));
        });

        if (selectedIds.length === 0) {
            Swal.fire("Notification", "Please select at least one product!", "warning");
            return;
        }

        // Display the payment method selection dialog
        Swal.fire({
            title: "Choose payment method",
            text: "Please select the payment method you would like to use.",
            icon: "question",
            showCancelButton: true,
            confirmButtonText: "COD",
            cancelButtonText: "MoMo",
            showDenyButton: true,
            denyButtonText: "ZaloPay",
            html: `
                <button id="other-payment" class="swal2-confirm swal2-styled" style="margin-top: 10px;">
                    Other E-wallets
                </button>
            `,
            didOpen: () => {
                document.getElementById("other-payment").addEventListener("click", function () {
                    processOrder(selectedIds, "Other");
                });
            }
        }).then((result) => {
            if (result.isConfirmed) {
                processOrder(selectedIds, 2); // COD
            } else if (result.dismiss === Swal.DismissReason.cancel) {
                processOrder(selectedIds, 0); // MoMo
            } else if (result.isDenied) {
                processOrder(selectedIds, 1); // ZaloPay
            }
        });
    }

    function processOrder(cartIds, paymentMethod) {
        fetch('/Order/CreateOrderWithCart', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ cartIds: cartIds, paymentMethod: paymentMethod })
        }).then(response => response.json())
        .then(data => {
            if (data.payUrl) {
                window.location.href = data.payUrl;  // Redirect on frontend
            }
        });
    }
    window.onload = calculateTotal;

</script>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll(".delete-button").forEach(button => {
            button.addEventListener("click", function (event) {
                event.preventDefault(); // Ngăn điều hướng mặc định
                let itemId = this.getAttribute("data-id"); // Lấy ID sản phẩm

                Swal.fire({
                    title: "Are you sure you want to delete?",
                    text: "This action cannot be undone!",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonText: "Confirm",
                    cancelButtonText: "Cancel"
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Nếu người dùng xác nhận, chuyển hướng đến Controller để xóa
                        window.location.href = `/Cart/Delete/${itemId}`;
                    }
                });
            });
        });
    });
</script>